'use strict'

// No action
task('no_action')

// Action setted later
const actionLater = task('action_later')
actionLater.action = function() {
  return 'complete'
}

task('task_fail', function() {
  this.fail( 'fail' )
})

// Execute tasks in serie
task('task_sync', function() {
  return this.path+':complete'
})

task('task_async', { async: true }, function() {
  const scope = this

  setTimeout(function() {
    scope.complete(scope.path+':complete')
  }, 20)

  return this.path+':incomplete'
})


task('serie0', [ 'task_sync', 'task_async' ], function() {
  return this.path+':complete'
})

task('task_sync_async', { async: false }, function() {
  const scope = this

  setTimeout(function() {
    scope.complete(scope.path+':complete')
  }, 10)

  return this.path+':incomplete'
})

task('parallel0', [ 'task_sync', 'task_async', 'task_sync_async' ], { preReqSequence: 'parallel' }, function() {
  return this.path+':complete'
})

task('task_param', function( name ) {
  const res = "Hello "+name+"!"
  if (process.argv.indexOf('task_param') !== -1) {
    console.log(res)
  }
  return res
})

task('task_param2', function() {
  const res = "Hello "+this.argv.task_param2._[0]+"!"
  if (process.argv.indexOf('task_param2') !== -1) {
    console.log(res)
  }
  return res
})

task('task_param3', function() {
  const res = "Hello "+this.argv.name+"!"
  if (process.argv.indexOf('task_param3') !== -1) {
    console.log(res)
  }
  return res
})




// Hook
namespace('hook', function() {

  task('task0', {
    hooks: {
      pre: 'hook:task1',
      post: ['hook:task2', function() {
        console.log('post_function')
      }]
    }
  }, function() {
    return this.path
  })

  task('task1', function() {
    return this.path
  })

  task('task2', function() {
    return this.path
  })

})


// Error
task('error0', function() {
  this.fail('Error0')
  return 'error0'
})

// task('error1', { breakOnError: false }, function() {
//   this.fail('Error1')
//   return 'error1'
// })